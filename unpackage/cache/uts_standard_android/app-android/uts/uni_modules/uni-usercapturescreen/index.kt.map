{"version":3,"sources":["uni_modules/uni-usercapturescreen/utssdk/app-android/index.uts","uni_modules/uni-usercapturescreen/utssdk/interface.uts"],"sourcesContent":["import { UTSAndroid } from \"io.dcloud.uts\";\nimport ActivityCompat from \"androidx.core.app.ActivityCompat\";\nimport Manifest from \"android.Manifest\";\nimport PackageManager from \"android.content.pm.PackageManager\";\nimport Build from \"android.os.Build\";\nimport FileObserver from \"android.os.FileObserver\";\nimport File from \"java.io.File\";\nimport Environment from \"android.os.Environment\";\nimport System from 'java.lang.System';\nimport WindowManager from 'android.view.WindowManager';\nimport { OnUserCaptureScreenCallbackResult, UserCaptureScreenCallback, OnUserCaptureScreen, OffUserCaptureScreen, SetUserCaptureScreenSuccess, SetUserCaptureScreenOptions, SetUserCaptureScreen } from \"../interface.uts\";\n\n\n/**\n\t* 文件监听器\n\t*/\nlet observer : ScreenFileObserver | null = null;\n/**\n\t* 记录文件监听器上次监听的时间戳，避免重复监听\n\t*/\nlet lastObserverTime : number = 0;\n/**\n\t* 截屏回调\n\t*/\nlet listener : UserCaptureScreenCallback | null = null;\n\n/**\n\t* android 文件监听实现\n\t*/\nclass ScreenFileObserver extends FileObserver {\n\n\t/**\n\t\t* 截屏文件目录\n\t\t*/\n\tprivate screenFile : File;\n\n\tconstructor(screenFile : File) {\n\t\tsuper(screenFile);\n\t\tthis.screenFile = screenFile;\n\t}\n\n\toverride onEvent(event : Int, path : string | null) : void {\n\t\t// 只监听文件新增事件\n\t\tif (event == FileObserver.CREATE) {\n\t\t\tif (path != null) {\n\t\t\t\tconst currentTime = System.currentTimeMillis();\n\t\t\t\tif ((currentTime - lastObserverTime) < 1000) {\n\t\t\t\t\t// 本地截屏行为比上一次超过1000ms, 才认为是一个有效的时间\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlastObserverTime = currentTime;\n\n\t\t\t\tconst screenShotPath = new File(this.screenFile, path).getPath();\n\t\t\t\tconst res : OnUserCaptureScreenCallbackResult = {\n\t\t\t\t\tpath: screenShotPath\n\t\t\t\t}\n\t\t\t\tlistener?.(res);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n\t* 开启截图监听\n\t*/\nexport const onUserCaptureScreen : OnUserCaptureScreen = function (callback : UserCaptureScreenCallback | null) {\n\t// 检查相关权限是否已授予\n\tif (ActivityCompat.checkSelfPermission(UTSAndroid.getAppContext()!, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n\t\t// 无权限，申请权限\n\t\tActivityCompat.requestPermissions(UTSAndroid.getUniActivity()!, arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE), 1001);\n\t\treturn;\n\t}\n\t// 更新监听\n\tlistener = callback;\n\n\tlet directory_screenshot : File;\n\tif (Build.MANUFACTURER.toLowerCase() == \"xiaomi\") {\n\t\t// @Suppress(\"DEPRECATION\")\n\t\tdirectory_screenshot = new File(new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_DCIM), \"Screenshots\");\n\t} else {\n\t\t// @Suppress(\"DEPRECATION\")\n\t\tdirectory_screenshot = new File(new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_PICTURES), \"Screenshots\");\n\t}\n\t// 先结束监听 再开启监听\n\tobserver?.stopWatching();\n\tobserver = new ScreenFileObserver(directory_screenshot);\n\tobserver?.startWatching();\n\t\n\t\n\tUTSAndroid.onAppActivityDestroy(function(){\n\t\tobserver?.stopWatching()\n\t\tobserver = null\n\t})\n\t\n\t\n}\n\n/**\n\t* 关闭截屏监听\n\t*/\nexport const offUserCaptureScreen : OffUserCaptureScreen = function (_ : UserCaptureScreenCallback | null) {\n\t// android10以上，关闭监听通过移除文件监听器实现\n\tobserver?.stopWatching();\n\tobserver = null;\n\tlastObserverTime = 0;\n}\n\n/**\n\t* 设置是否禁止截屏\n\t*/\nexport const setUserCaptureScreen : SetUserCaptureScreen = function (option : SetUserCaptureScreenOptions) {\n\t// 切换到UI线程\n\tUTSAndroid.getUniActivity()?.runOnUiThread(new SetUserCaptureScreenRunnable(option.enable));\n\tconst res : SetUserCaptureScreenSuccess = {}\n\toption.success?.(res);\n\toption.complete?.(res);\n}\n\nclass SetUserCaptureScreenRunnable extends Runnable {\n\n\t/**\n\t\t* ture: 允许用户截屏\n\t\t* false: 不允许用户截屏，防止用户截屏到应用页面内容\n\t\t*/\n\tprivate enable : boolean;\n\n\tconstructor(enable : boolean) {\n\t\tsuper();\n\t\tthis.enable = enable;\n\t}\n\n\toverride run() : void {\n\t\tif (this.enable) {\n\t\t\tUTSAndroid.getUniActivity()?.getWindow()?.clearFlags(WindowManager.LayoutParams.FLAG_SECURE);\n\t\t} else {\n\t\t\tUTSAndroid.getUniActivity()?.getWindow()?.addFlags(WindowManager.LayoutParams.FLAG_SECURE);\n\t\t}\n\t}\n}\n","/**\n\t* uni.onUserCaptureScreen/uni.offUserCaptureScreen回调参数\n\t*/\nexport type OnUserCaptureScreenCallbackResult = {\n\t/**\n\t\t* 截屏文件路径（仅Android返回）\n\t\t*/\n\tpath ?: string\n}\n\n/**\n\t* uni.onUserCaptureScreen/uni.offUserCaptureScreen回调函数定义\n\t*/\nexport type UserCaptureScreenCallback = (res : OnUserCaptureScreenCallbackResult) => void\n\n/**\n\t* uni.onUserCaptureScreen函数定义\n\t* 开启截屏监听 \n\t* \n\t* @param {UserCaptureScreenCallback} callback \n\t* @tutorial https://uniapp.dcloud.net.cn/api/system/capture-screen.html#onusercapturescreen\n\t* @platforms APP-IOS = ^9.0,APP-ANDROID = ^4.4\n\t* @since 3.7.7\n\t*/\nexport type OnUserCaptureScreen = (callback : UserCaptureScreenCallback | null) => void\n\n/**\n\t* uni.offUserCaptureScreen函数定义\n\t* 关闭截屏监听  \n\t* \n\t* @param {UserCaptureScreenCallback} callback \n\t* @tutorial https://uniapp.dcloud.net.cn/api/system/capture-screen.html#offusercapturescreen\n\t* @platforms APP-IOS = ^9.0,APP-ANDROID = ^4.4\n\t* @since 3.7.7\n\t*/\nexport type OffUserCaptureScreen = (callback : UserCaptureScreenCallback | null) => void\n\n/**\n\t* uni.setUserCaptureScreen成功回调参数\n\t*/\nexport type SetUserCaptureScreenSuccess = {\n}\n\n/**\n\t* uni.setUserCaptureScreen失败回调参数\n\t*/\nexport type SetUserCaptureScreenFail = {\n\t/**\n\t\t* 错误码\n\t\t* 12001:system not support\n\t\t* 12010:system internal error\n\t\t*/\n\terrCode : number,\n\t/**\n\t\t* 调用API的名称\n\t\t*/\n\terrSubject : string,\n\t/**\n\t\t* 错误的详细信息\n\t\t*/\n\terrMsg : string,\n}\n\n/**\n\t* uni.setUserCaptureScreen成功回调函数定义\n\t*/\nexport type SetUserCaptureScreenSuccessCallback = (res : SetUserCaptureScreenSuccess) => void\n\n/**\n\t* uni.setUserCaptureScreen失败回调函数定义\n\t*/\nexport type SetUserCaptureScreenFailCallback = (res : SetUserCaptureScreenFail) => void\n\n/**\n\t* uni.setUserCaptureScreen完成回调函数定义\n\t*/\nexport type SetUserCaptureScreenCompleteCallback = (res : any) => void\n\n/**\n\t* uni.setUserCaptureScreen参数\n\t*/\n\nexport type SetUserCaptureScreenOptions = {\n\t/**\n\t* true: 允许用户截屏 false: 不允许用户截屏，防止用户截屏到应用页面内容\n\t*/\n\tenable : boolean;\n\t/**\n\t* 接口调用成功的回调函数\n\t*/\n\t// success : SetUserCaptureScreenSuccessCallback | null,\n\tsuccess ?: SetUserCaptureScreenSuccessCallback,\n\t/**\n\t* 接口调用失败的回调函数\n\t*/\n\t// fail : SetUserCaptureScreenFailCallback | null,\n\tfail ?: SetUserCaptureScreenFailCallback,\n\t/**\n\t* 接口调用结束的回调函数（调用成功、失败都会执行）\n\t*/\n\t// complete : SetUserCaptureScreenSuccessCallback | SetUserCaptureScreenFailCallback | null\n\tcomplete ?: SetUserCaptureScreenCompleteCallback\n}\n\n\n/**\n * * uni.setUserCaptureScreen函数定义\n\n\t* 设置防截屏  \n\t* \n\t* @param {SetUserCaptureScreenOptions} options \n\t* @tutorial https://uniapp.dcloud.net.cn/api/system/capture-screen.html#setusercapturescreen\n\t* @platforms APP-IOS = ^13.0,APP-ANDROID = ^4.4\n\t* @since 3.7.7\n\t*/\nexport type SetUserCaptureScreen = (options : SetUserCaptureScreenOptions) => void\n\nexport interface Uni {\n\tonUserCaptureScreen : OnUserCaptureScreen,\n\toffUserCaptureScreen : OffUserCaptureScreen,\n\tsetUserCaptureScreen : SetUserCaptureScreen\n}\n"],"names":[],"mappings":"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"}